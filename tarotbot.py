import os
import logging
import random

from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters


load_dotenv()

PORT = int(os.environ.get('PORT', 80))

secret_token = os.getenv('TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)


def get_yes_or_no(update, context):
    text = update.effective_message.text
    chat = update.effective_chat
    try:
        deck = text
    except Exception as error:
        logging.error(f'–¢–∞–∫–æ–π –∫–æ–ª–æ–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {error}')
        deck = '–¢–∞—Ä–æ –£—ç–π—Ç–∞'
    button = ReplyKeyboardMarkup([['/decks']],
                                 resize_keyboard=True)
    answer = get_new_image(deck)[0]
    try:
        file = open(f'/app/data/yes_or_no.txt', 'rb')
        answer = file[get_new_image(deck)[0]]
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {error}')
        answer = '–û—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç'
    context.bot.send_photo(
        chat.id,
        get_new_image(deck)[1],
        caption='{}'.format(answer),
        reply_markup=button)
    return deck


def get_deck(update, context):
    text = update.effective_message.text
    chat = update.effective_chat
    name = update.message.chat.first_name
    try:
        deck = text
    except Exception as error:
        logging.error(f'–¢–∞–∫–æ–π –∫–æ–ª–æ–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {error}')
        deck = '–¢–∞—Ä–æ –£—ç–π—Ç–∞'
    button = ReplyKeyboardMarkup([['/decks']],
                                 resize_keyboard=True)
    context.bot.send_photo(
        chat.id,
        get_new_image(deck)[1],
        caption='{}, –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è'.format(name),
        reply_markup=button)
    return deck


def deck_selection(update, context):
    chat = update.effective_chat
    button = ReplyKeyboardMarkup([
        ['–¢–∞—Ä–æ –£—ç–π—Ç–∞', '–¢–∞—Ä–æ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö']
        ],
        resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç',
        reply_markup=button)


def get_new_image(deck):
    random_number = random.randint(0, 77)
    deck = deck
    try:
        random_card = open(f'/app/media/images/{deck}/{random_number}.jpg',
                           'rb')
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {error}')
        random_card = open('/app/media/images/–¢–∞—Ä–æ –£—ç–π—Ç–∞/back.jpg', 'rb')
    return random_number, random_card


def get_start(update, context):
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([['/decks']],
                                 resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ü—Ä–∏–≤–µ—Ç, {}! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –∂–¥—ë—Ç?\n'
              '–í—ã–±–µ—Ä–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–ª–æ–¥—É –∏ –í–∞–º –≤—ã–ø–∞–¥–µ—Ç –∫–∞—Ä—Ç–∞ –¥–Ω—è').format(name),
        reply_markup=button
        )


def another_words(update, context):
    text = update.effective_message.text.lower()
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([['/decks']],
                                 resize_keyboard=True)
    list_card = ['–≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–¥—É', '–∫–æ–ª–æ–¥–∞', '–∫–∞—Ä—Ç–∞ –¥–Ω—è', '–¥–∞–π –∫–∞—Ä—Ç—É']
    list_hi = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '—Ö–∞–π', '—Ö–µ–ª–ª–æ', 'üëã']
    list_how = ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å',
                '–∫–∞–∫ –∂–∏–∑–Ω—å']
    if text in list_card:
        deck_selection(update, context)
    elif [word for word in list_hi if word in text]:
        list_hi_answer = [
            '{}, –ø—Ä–∏–≤–µ—Ç, –º–æ–∂–µ—Ç –ø–æ–≥–∞–¥–∞–µ–º?'.format(name),
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}!'.format(name),
            'Hello üëã',
            ]
        list_hi_sticker = [
            ('CAACAgIAAxkBAAIOo2FnFc3Eh9gzBko5fi-edLxZAAHqyAACVAADQbVWDGq3-McI'
             'jQH6IQQ'),
            ('CAACAgIAAxkBAAIOpWFnFmMMAp8nzN3Gv1rurTWmYeLuAAIRAwAC8-O-CxlunyW'
             'ezCwkIQQ'),
            ('CAACAgIAAxkBAAIOp2FnF4qCXJqteKd7YOAtiSyVyFZ4AAKSAQACVp29Cp_QLQ'
             'hCLtUFIQQ'),
            ('CAACAgIAAxkBAAIOqWFnGBi90XgL4WneLHIN2i7PF2KgAAI1AQACMNSdEbS4Nf1m'
             'oLZ8IQQ'),
        ]
        context.bot.send_message(
            chat_id=chat.id,
            text=list_hi_answer[random.randint(0, len(list_hi_answer)-1)],
            reply_markup=button
            )
        context.bot.send_sticker(
            chat.id,
            list_hi_sticker[random.randint(0, len(list_hi_sticker)-1)]
            )
    elif [word for word in list_how if word in text]:
        list_answer = ['–£ –º–µ–Ω—è –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–°–µ–π—á–∞—Å –±—ã –ø–æ–≥–∞–¥–∞—Ç—å üîÆ',
                       '–•–æ—Ä–æ—à–æ', '–†–∞–¥—É—é—Å—å –∂–∏–∑–Ω–∏ üòç',
                       '–ì–æ—Ç–æ–≤ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞—Ç—å ü§ì', 'üëç']
        context.bot.send_message(
            chat_id=chat.id,
            text=list_answer[random.randint(0, len(list_answer)-1)],
            reply_markup=button
            )
    elif '—Ç–∞—Ä–æ–ª–æ–≥' in text:
        context.bot.send_message(
            chat_id=chat.id,
            text='–ï–ª–µ–Ω–∞ –õ–æ–≥–∏–Ω–æ–≤–∞, https://www.instagram.com/hellyloginson/ \n'
                 '–¢–ê–†–û ‚ú≥Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.'
                 '–û—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã',
            reply_markup=button
            )
    else:
        context.bot.send_message(
            chat_id=chat.id,
            text='{}, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥'.format(name),
            reply_markup=button
            )


def main():
    updater = Updater(token=secret_token)

    updater.dispatcher.add_handler(CommandHandler('start', get_start))
    updater.dispatcher.add_handler(CommandHandler('decks', deck_selection))
    updater.dispatcher.add_handler(CommandHandler('yes_or_no',
                                                  deck_selection))
    updater.dispatcher.add_handler(MessageHandler(
        Filters.regex('–¢–∞—Ä–æ –£—ç–π—Ç–∞') |
        Filters.regex('–¢–∞—Ä–æ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö'), get_deck))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, another_words))

    updater.start_webhook(listen="0.0.0.0",
                          port=int(PORT),
                          url_path=secret_token,
                          webhook_url=('https://tarot-helen-bot.herokuapp.com/'
                                       + secret_token))
    # updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
