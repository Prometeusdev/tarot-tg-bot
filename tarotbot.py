import os
import logging
import random
# import tg_analytic

from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

from data.dictionaries import yes_no_dict, info_card_dict


load_dotenv()

PORT = int(os.environ.get('PORT', 80))

secret_token = os.getenv('TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)


def get_yes_or_no(update, context):
    chat = update.effective_chat
    # text = update.effective_message.text
    # tg_analytic.analysis(chat.id, text)
    deck = '–¢–∞—Ä–æ –£—ç–π—Ç–∞'
    button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                 resize_keyboard=True)
    number_card = get_new_image(deck)
    answer = yes_no_dict[number_card[0]]
    context.bot.send_photo(
        chat.id,
        number_card[1],
        caption='{}'.format(answer),
        reply_markup=button)
    return deck


def get_deck(update, context):
    text = update.effective_message.text
    chat = update.effective_chat
    name = update.message.chat.first_name
    try:
        deck = text
    except Exception as error:
        logging.error(f'–¢–∞–∫–æ–π –∫–æ–ª–æ–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {error}')
        deck = '–¢–∞—Ä–æ –£—ç–π—Ç–∞'
    button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                 resize_keyboard=True)
    number_card = get_new_image(deck)
    answer = info_card_dict[number_card[0]]
    context.bot.send_photo(
        chat.id,
        number_card[1],
        caption=f'{name}, –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è!\n{answer}',
        reply_markup=button)
    return deck


def get_question(update, context):
    chat = update.effective_chat
    button = ReplyKeyboardMarkup([['–°–±—É–¥–µ—Ç—Å—è –ª–∏ –º–æ—ë –∂–µ–ª–∞–Ω–∏–µ?']],
                                 resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–æ –∑–Ω–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏–ª–∏ '
              '–º—ã—Å–ª–µ–Ω–Ω–æ –∑–∞–≥–∞–¥–∞–π—Ç–µ —Å–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π'),
        reply_markup=button)


def deck_selection(update, context):
    chat = update.effective_chat
    button = ReplyKeyboardMarkup([
        ['–¢–∞—Ä–æ –£—ç–π—Ç–∞', '–¢–∞—Ä–æ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö']
        ],
        resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç',
        reply_markup=button)


def get_new_image(deck):
    random_number = random.randint(0, 77)
    deck = deck
    try:
        random_card = open(f'/app/media/images/{deck}/{random_number}.jpg',
                           'rb')
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {error}')
        random_card = open('/app/media/images/–¢–∞—Ä–æ –£—ç–π—Ç–∞/back.jpg', 'rb')
    return random_number, random_card


def get_tarot_layout(update, context):
    chat = update.effective_chat
    button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                 resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–†–∞—Å–∫–ª–∞–¥—ã —Ç–∞—Ä–æ: –Ω–∞ –ª—é–±–æ–≤—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, '
              '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ñ–µ—Ä—É‚ù§Ô∏èüíµ\n'
              '–ö–∞–∫ –æ–±–æ–π—Ç–∏ "–æ—Å—Ç—Ä—ã–µ —É–≥–ª—ã"? –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–µ–π?\n'
              '–Ø –ø–æ–º–æ–≥—É –í–∞–º –≤ —ç—Ç–æ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!\n\n'
              '–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —á–∞—Ç @Lenoktaro\n'
              '–ò–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–∞ '
              'https://www.instagram.com/hellyloginson/\n'
              '–î–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É '
              '\"—Ç–∞—Ä–æ-–±–æ—Ç\"'),
        reply_markup=button
        )


def get_author(update, context):
    chat = update.effective_chat
    button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                 resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ü—Ä–∏–≤–µ—Ç, —è –í–ª–∞–¥–∏–º–∏—Ä!\n–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üë®‚Äçüíª\n'
              '–ù–∞–ø–∏—Å–∞–ª –±–æ—Ç–∞ –¥–ª—è —Å–≤–æ–µ–π –º–∞–º—ã.\n'
              '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ—Ç –±–æ—Ç –∏ –í–∞–º –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è.\n\n'
              '–ù–∞—à–ª–∏ –ø—Ä–æ–±–ª–µ–º—É? –ß–∞—Ç @Rume73'),
        reply_markup=button
        )


def get_help(update, context):
    chat = update.effective_chat
    button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                 resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n'
              '/card_of_the_day - –≤—ã—Ç–∞—â–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è\n'
              '/yes_or_no - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç "–¥–∞-–Ω–µ—Ç" –Ω–∞ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ\n'
              '/tarot_layout - –ø–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥\n'
              '/author - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞'),
        reply_markup=button
        )


def get_start(update, context):
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                 resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ü—Ä–∏–≤–µ—Ç, {}! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –∂–¥—ë—Ç?\n'
              '–í—ã–±–µ—Ä–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–ª–æ–¥—É –∏ –í–∞–º –≤—ã–ø–∞–¥–µ—Ç –∫–∞—Ä—Ç–∞ –¥–Ω—è').format(name),
        reply_markup=button
        )


def another_words(update, context):
    text = update.effective_message.text.lower()
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                 resize_keyboard=True)
    list_card = ['–≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–¥—É', '–∫–æ–ª–æ–¥–∞', '–¥–∞–π –∫–∞—Ä—Ç—É']
    list_yes_no = ['–≤–æ–ø—Ä–æ—Å', '–¥–∞', '–Ω–µ—Ç', '–¥–∞-–Ω–µ—Ç']
    list_help = ['–ø–æ–º–æ—â—å', 'help', '—Ö–µ–ª–ø']
    list_author = ['–∞–≤—Ç–æ—Ä', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–∞–¥–º–∏–Ω']
    list_thanks = ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é', 'thank']
    list_tarot_layout = ['–ø–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥', '—É—Å–ª—É–≥–∏', '—Ä–∞—Å–∫–ª–∞–¥—ã —Ç–∞—Ä–æ',
                         '–∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è']
    list_hi = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π', '—Ö–µ–ª–ª–æ', 'üëã']
    list_how = ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å',
                '–∫–∞–∫ –∂–∏–∑–Ω—å']
    if text in list_yes_no:
        get_question(update, context)
    elif text in list_card:
        deck_selection(update, context)
    elif text[-1] == '?':
        get_yes_or_no(update, context)
    elif text in list_help:
        get_help(update, context)
    elif text in list_author:
        get_author(update, context)
    elif text in list_tarot_layout:
        get_tarot_layout(update, context)
    elif [word for word in list_thanks if word in text]:
        list_thanks_sticker = [
            ('CAACAgIAAxkBAAEDHy9hcIXrEYxTHtmeu2spfLrc05jU1wAC9wADVp29CgtyJB1I'
             '9A0wIQQ'),
            ('CAACAgIAAxkBAAEDHzNhcIYufGz2jIQsXRVIAlJK97RdkwACUgEAAjDUnRERwgZS'
             '_w81pCEE'),
            ('CAACAgIAAxkBAAEDHzVhcIZp1fyyTkf7-BbSi8uGr5QkswACLgkAAhhC7ghmx6Iw'
             'r7yx9CEE'),
            ('CAACAgEAAxkBAAEDHzdhcIbK3yNFllb94x81SRPMlcTydwAC6wEAAjgOghGzhgTO'
             '4ZxJOSEE'),
        ]
        context.bot.send_sticker(
            chat.id,
            list_thanks_sticker[random.randint(0, len(list_thanks_sticker)-1)]
            )
    elif [word for word in list_hi if word in text]:
        list_hi_answer = [
            '{}, –ø—Ä–∏–≤–µ—Ç, –º–æ–∂–µ—Ç –ø–æ–≥–∞–¥–∞–µ–º?'.format(name),
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}!'.format(name),
            'Hello üëã',
            ]
        list_hi_sticker = [
            ('CAACAgIAAxkBAAIOo2FnFc3Eh9gzBko5fi-edLxZAAHqyAACVAADQbVWDGq3-McI'
             'jQH6IQQ'),
            ('CAACAgIAAxkBAAIOpWFnFmMMAp8nzN3Gv1rurTWmYeLuAAIRAwAC8-O-CxlunyW'
             'ezCwkIQQ'),
            ('CAACAgIAAxkBAAIOp2FnF4qCXJqteKd7YOAtiSyVyFZ4AAKSAQACVp29Cp_QLQ'
             'hCLtUFIQQ'),
            ('CAACAgIAAxkBAAIOqWFnGBi90XgL4WneLHIN2i7PF2KgAAI1AQACMNSdEbS4Nf1m'
             'oLZ8IQQ'),
        ]
        context.bot.send_message(
            chat_id=chat.id,
            text=list_hi_answer[random.randint(0, len(list_hi_answer)-1)],
            reply_markup=button
            )
        context.bot.send_sticker(
            chat.id,
            list_hi_sticker[random.randint(0, len(list_hi_sticker)-1)]
            )
    elif [word for word in list_how if word in text]:
        list_answer = ['–£ –º–µ–Ω—è –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–°–µ–π—á–∞—Å –±—ã –ø–æ–≥–∞–¥–∞—Ç—å üîÆ',
                       '–•–æ—Ä–æ—à–æ', '–†–∞–¥—É—é—Å—å –∂–∏–∑–Ω–∏ üòç',
                       '–ì–æ—Ç–æ–≤ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞—Ç—å ü§ì', 'üëç']
        context.bot.send_message(
            chat_id=chat.id,
            text=list_answer[random.randint(0, len(list_answer)-1)],
            reply_markup=button
            )
    elif text == '—Ç–∞—Ä–æ–ª–æ–≥':
        context.bot.send_message(
            chat_id=chat.id,
            text='–ï–ª–µ–Ω–∞ –õ–æ–≥–∏–Ω–æ–≤–∞, https://www.instagram.com/hellyloginson/\n'
                 '–¢–ê–†–û ‚ú≥Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.\n'
                 '–û—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã @Lenoktaro',
            reply_markup=button
            )
    # elif text == '–≤—ã–≤–µ–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
    #     st = text.split(' ')
    #     if 'txt' in st or '—Ç—Ö—Ç' in st:
    #         tg_analytic.analysis(st, chat.id)
    #         with open('%s.txt' %chat.id,'r',encoding='UTF-8') as file:
    #             context.send_document(chat.id, file)
    #             tg_analytic.remove(chat.id)
    #     else:
    #         messages = tg_analytic.analysis(st, chat.id)
    #         context.send_message(chat.id, messages)
    else:
        random_answer = random.randint(0, 2)
        if random_answer == 0:
            get_help(update, context)
        elif random_answer == 1:
            context.bot.send_sticker(
                chat.id,
                ('CAACAgIAAxkBAAEDHFxhbmwRWLa1ZySyHOeDfUFfcM4VQwACIQEAAvcCyA9E'
                 '9UdZozFIriEE'))
        else:
            context.bot.send_message(
                chat_id=chat.id,
                text=('{}, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§î, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
                      '–º–µ–Ω—é –∫–æ–º–∞–Ω–¥.').format(name),
                reply_markup=button
                )


def main():
    updater = Updater(token=secret_token)

    updater.dispatcher.add_handler(CommandHandler('start', get_start))
    updater.dispatcher.add_handler(CommandHandler('card_of_the_day',
                                                  deck_selection))
    updater.dispatcher.add_handler(MessageHandler(Filters.regex('–ö–∞—Ä—Ç–∞ –¥–Ω—è'),
                                                  deck_selection))
    updater.dispatcher.add_handler(CommandHandler('yes_or_no',
                                                  get_question))
    updater.dispatcher.add_handler(MessageHandler(Filters.regex('–î–∞-–Ω–µ—Ç'),
                                                  get_question))
    updater.dispatcher.add_handler(MessageHandler(
        Filters.regex('–¢–∞—Ä–æ –£—ç–π—Ç–∞') |
        Filters.regex('–¢–∞—Ä–æ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö'), get_deck))
    updater.dispatcher.add_handler(CommandHandler('tarot_layout',
                                                  get_tarot_layout))
    updater.dispatcher.add_handler(CommandHandler('help', get_help))
    updater.dispatcher.add_handler(CommandHandler('author', get_author))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, another_words))

    updater.start_webhook(listen="0.0.0.0",
                          port=int(PORT),
                          url_path=secret_token,
                          webhook_url=('https://tarot-helen-bot.herokuapp.com/'
                                       + secret_token))
    # updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
