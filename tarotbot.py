import os
import logging
import random
import tg_analytic

from dotenv import load_dotenv
from telegram import (ReplyKeyboardMarkup, InlineKeyboardButton,
                      InlineKeyboardMarkup)
from telegram.ext import ConversationHandler

from data.dictionaries import yes_no_dict, info_card_dict


load_dotenv()
admin_id = os.getenv('ID')

FIRST, SECOND = range(2)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)


def get_yes_or_no(update, context):
    chat = update.effective_chat
    deck = '–¢–∞—Ä–æ –£—ç–π—Ç–∞'
    if str(chat.id) == admin_id:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
                                     resize_keyboard=True)
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
    number_card = get_new_image(deck)
    answer = yes_no_dict[number_card[0]]
    context.bot.send_photo(
        chat.id,
        number_card[1],
        caption='{}'.format(answer),
        reply_markup=button)
    return deck


def get_deck(update, context):
    text = update.effective_message.text
    chat = update.effective_chat
    name = update.message.chat.first_name
    try:
        deck = text
    except Exception as error:
        logging.error(f'–¢–∞–∫–æ–π –∫–æ–ª–æ–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {error}')
        deck = '–¢–∞—Ä–æ –£—ç–π—Ç–∞'
    if str(chat.id) == admin_id:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
                                     resize_keyboard=True)
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
    number_card = get_new_image(deck)
    answer = info_card_dict[number_card[0]]
    if chat.type == 'private':
        context.bot.send_photo(
            chat.id,
            number_card[1],
            caption=f'{name}, –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è!\n{answer}',
            reply_markup=button)
    else:
        context.bot.send_photo(
            chat.id,
            number_card[1],
            caption=f'–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è!\n{answer}',
            reply_markup=button)
    return deck


def get_question(update, context):
    chat = update.effective_chat
    text = update.effective_message.text
    possible_commands = ['/yes_or_no', '–≤–æ–ø—Ä–æ—Å', '–¥–∞', '–Ω–µ—Ç', '–¥–∞-–Ω–µ—Ç']
    if text in possible_commands:
        text = '–ó–∞–ø—Ä–æ—Å –î–∞-–Ω–µ—Ç'
    tg_analytic.statistics(chat.id, text)
    button = ReplyKeyboardMarkup([['–°–±—É–¥–µ—Ç—Å—è –ª–∏ –º–æ—ë –∂–µ–ª–∞–Ω–∏–µ?']],
                                 resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–æ –∑–Ω–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏–ª–∏ '
              '–º—ã—Å–ª–µ–Ω–Ω–æ –∑–∞–≥–∞–¥–∞–π—Ç–µ —Å–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π'),
        reply_markup=button)


def deck_selection(update, context):
    chat = update.effective_chat
    text = update.effective_message.text
    possible_commands = ['/card_of_the_day', '–≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–¥—É', '–∫–æ–ª–æ–¥–∞',
                         '–¥–∞–π –∫–∞—Ä—Ç—É']
    if text in possible_commands:
        text = '–ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –¥–Ω—è'
    tg_analytic.statistics(chat.id, text)
    button = ReplyKeyboardMarkup([
        ['–¢–∞—Ä–æ –£—ç–π—Ç–∞', '–¢–∞—Ä–æ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö']
        ],
        resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç',
        reply_markup=button)


def get_new_image(deck):
    random_number = random.randint(0, 77)
    deck = deck
    try:
        random_card = open(f'/app/media/images/{deck}/{random_number}.jpg',
                           'rb')
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {error}')
        random_card = open('/app/media/images/–¢–∞—Ä–æ –£—ç–π—Ç–∞/back.jpg', 'rb')
    return random_number, random_card


def get_tarot_layout(update, context):
    chat = update.effective_chat
    text = update.effective_message.text
    possible_commands = ['/tarot_layout', '–ø–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥', '—É—Å–ª—É–≥–∏',
                         '—Ä–∞—Å–∫–ª–∞–¥—ã —Ç–∞—Ä–æ', '–∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
                         '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è']
    if text in possible_commands:
        text = '–ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞'
    tg_analytic.statistics(chat.id, text)
    if str(chat.id) == admin_id:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
                                     resize_keyboard=True)
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–†–∞—Å–∫–ª–∞–¥—ã —Ç–∞—Ä–æ: –Ω–∞ –ª—é–±–æ–≤—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, '
              '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ñ–µ—Ä—É‚ù§Ô∏èüíµ\n'
              '–ö–∞–∫ –æ–±–æ–π—Ç–∏ "–æ—Å—Ç—Ä—ã–µ —É–≥–ª—ã"? –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–µ–π?\n'
              '–Ø –ø–æ–º–æ–≥—É –í–∞–º –≤ —ç—Ç–æ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!\n\n'
              '–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —á–∞—Ç @Lenoktaro\n'
              '–ò–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–∞ '
              'https://www.instagram.com/hellyloginson/\n'
              '–î–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É '
              '\"—Ç–∞—Ä–æ-–±–æ—Ç\"'),
        reply_markup=button
        )


def get_author(update, context):
    chat = update.effective_chat
    text = update.effective_message.text
    possible_commands = ['/author', '–∞–≤—Ç–æ—Ä', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–∞–¥–º–∏–Ω']
    if text in possible_commands:
        text = '–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∞'
    tg_analytic.statistics(chat.id, text)
    if str(chat.id) == admin_id:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
                                     resize_keyboard=True)
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ü—Ä–∏–≤–µ—Ç, —è –í–ª–∞–¥–∏–º–∏—Ä!\n–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üë®‚Äçüíª\n'
              '–ù–∞–ø–∏—Å–∞–ª –±–æ—Ç–∞ –¥–ª—è —Å–≤–æ–µ–π –º–∞–º—ã.\n'
              '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ—Ç –±–æ—Ç –∏ –í–∞–º –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è.\n\n'
              '–ù–∞—à–ª–∏ –ø—Ä–æ–±–ª–µ–º—É? –ß–∞—Ç @Rume73'),
        reply_markup=button
        )


def get_help(update, context):
    chat = update.effective_chat
    text = update.effective_message.text
    possible_commands = ['/help', '–ø–æ–º–æ—â—å', 'help', '—Ö–µ–ª–ø']
    if text in possible_commands:
        text = '–ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞'
    tg_analytic.statistics(chat.id, text)
    if str(chat.id) == admin_id:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
                                     resize_keyboard=True)
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n'
              '/card_of_the_day - –≤—ã—Ç–∞—â–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è\n'
              '/yes_or_no - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç "–¥–∞-–Ω–µ—Ç" –Ω–∞ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ\n'
              '/tarot_layout - –ø–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥\n'
              '/author - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞'),
        reply_markup=button
        )


def get_format(update, context):
    chat = update.effective_chat
    if str(chat.id) == admin_id:
        keyboard = [
            [
                InlineKeyboardButton('–ö–æ–º–∞–Ω–¥—ã', callback_data='–∫–æ–º–∞–Ω–¥—ã'),
                InlineKeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                                     callback_data='–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
            ],
            [InlineKeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã',
                                  callback_data='–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã')],
            [InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ñ–∞–π–ª–µ .txt',
                                  callback_data='—Ç—Ö—Ç')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                                  reply_markup=reply_markup)
        return FIRST
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
        context.bot.send_message(
            chat_id=chat.id,
            text=('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ üòã'),
            reply_markup=button
            )


def number_of_days(update, _):
    query = update.callback_query
    if query.data == '—Ç—Ö—Ç':
        format = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã —Ç—Ö—Ç'
    else:
        format = query.data
    query.answer()
    keyboard = [
        [
            InlineKeyboardButton('1', callback_data=f'1 {format}'),
            InlineKeyboardButton('2', callback_data=f'2 {format}'),
            InlineKeyboardButton('3', callback_data=f'3 {format}'),
        ],
        [
            InlineKeyboardButton('4', callback_data=f'4 {format}'),
            InlineKeyboardButton('5', callback_data=f'5 {format}'),
            InlineKeyboardButton('6', callback_data=f'6 {format}'),
        ],
        [
            InlineKeyboardButton('7', callback_data=f'7 {format}'),
            InlineKeyboardButton('8', callback_data=f'8 {format}'),
            InlineKeyboardButton('9', callback_data=f'9 {format}'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π',
                            reply_markup=reply_markup)
    return SECOND


def get_statistics(update, context):
    chat = update.effective_chat
    query = update.callback_query
    answer = query.data
    query.answer()
    if str(chat.id) == admin_id:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
                                     resize_keyboard=True)
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
    text = (f'—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {answer}')
    st = text.split(' ')
    if 'txt' in st or '—Ç—Ö—Ç' in st:
        tg_analytic.analysis(st)
        with open('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.txt', 'r', encoding='UTF-8') as file:
            context.bot.send_document(chat.id, file, reply_markup=button)
            tg_analytic.remove()
    else:
        messages = tg_analytic.analysis(st)
        context.bot.send_message(chat.id, messages, reply_markup=button)
    query.edit_message_text(text="–ë—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –µ—â—ë —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–∏—à–∏!")
    return ConversationHandler.END


def get_start(update, context):
    chat = update.effective_chat
    name = update.message.chat.first_name
    text = update.effective_message.text
    tg_analytic.statistics(chat.id, text)
    if str(chat.id) == admin_id:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
                                     resize_keyboard=True)
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
    print(chat.type)
    if chat.type == 'private':
        context.bot.send_message(
            chat_id=chat.id,
            text=('–ü—Ä–∏–≤–µ—Ç, {}! –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –∂–¥—ë—Ç?\n'
                  '–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–ª–æ–¥—É –∏ –í–∞–º –≤—ã–ø–∞–¥–µ—Ç –∫–∞—Ä—Ç–∞ '
                  '–¥–Ω—è. –¢–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç \"–¥–∞-–Ω–µ—Ç\" –Ω–∞ –≤–æ–ø—Ä–æ—Å '
                  '–Ω–∞ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ').format(name),
            reply_markup=button
            )
    else:
        context.bot.send_message(
            chat_id=chat.id,
            text=('–ü—Ä–∏–≤–µ—Ç! –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –∂–¥—ë—Ç?\n'
                  '–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–ª–æ–¥—É –∏ –í–∞–º –≤—ã–ø–∞–¥–µ—Ç –∫–∞—Ä—Ç–∞ '
                  '–¥–Ω—è. –¢–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç \"–¥–∞-–Ω–µ—Ç\" –Ω–∞ –≤–æ–ø—Ä–æ—Å '
                  '–Ω–∞ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ'),
            reply_markup=button
            )


def another_words(update, context):
    text = update.effective_message.text.lower()
    chat = update.effective_chat
    name = update.message.chat.first_name
    if str(chat.id) == admin_id:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç'], ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
                                     resize_keyboard=True)
    else:
        button = ReplyKeyboardMarkup([['–ö–∞—Ä—Ç–∞ –¥–Ω—è', '–î–∞-–Ω–µ—Ç']],
                                     resize_keyboard=True)
    list_card = ['–≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–¥—É', '–∫–æ–ª–æ–¥–∞', '–¥–∞–π –∫–∞—Ä—Ç—É']
    list_yes_no = ['–≤–æ–ø—Ä–æ—Å', '–¥–∞', '–Ω–µ—Ç', '–¥–∞-–Ω–µ—Ç']
    list_to_do = ['—á—Ç–æ –¥–µ–ª–∞–µ—à—å', '—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è']
    list_help = ['–ø–æ–º–æ—â—å', 'help', '—Ö–µ–ª–ø']
    list_author = ['–∞–≤—Ç–æ—Ä', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–∞–¥–º–∏–Ω']
    list_thanks = ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é', 'thank']
    list_tarot_layout = ['–ø–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥', '—É—Å–ª—É–≥–∏', '—Ä–∞—Å–∫–ª–∞–¥—ã —Ç–∞—Ä–æ',
                         '–∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è']
    list_hi = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π', '—Ö–µ–ª–ª–æ', 'üëã']
    list_how = ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å', '–∫–∞–∫ –∂–∏–∑–Ω—å']
    if text in list_yes_no:
        get_question(update, context)
    elif text in list_card:
        deck_selection(update, context)
    elif (text[-1] == '?' and
          [word for word in not list_how if word in text] and
          [word for word in not list_to_do if word in text]):
        get_yes_or_no(update, context)
    elif text in list_help:
        get_help(update, context)
    elif text in list_author:
        get_author(update, context)
    elif text in list_tarot_layout:
        get_tarot_layout(update, context)
    elif [word for word in list_thanks if word in text]:
        list_thanks_sticker = [
            ('CAACAgIAAxkBAAEDHy9hcIXrEYxTHtmeu2spfLrc05jU1wAC9wADVp29CgtyJB1I'
             '9A0wIQQ'),
            ('CAACAgIAAxkBAAEDHzNhcIYufGz2jIQsXRVIAlJK97RdkwACUgEAAjDUnRERwgZS'
             '_w81pCEE'),
            ('CAACAgIAAxkBAAEDHzVhcIZp1fyyTkf7-BbSi8uGr5QkswACLgkAAhhC7ghmx6Iw'
             'r7yx9CEE'),
            ('CAACAgEAAxkBAAEDHzdhcIbK3yNFllb94x81SRPMlcTydwAC6wEAAjgOghGzhgTO'
             '4ZxJOSEE'),
        ]
        context.bot.send_sticker(
            chat.id,
            list_thanks_sticker[random.randint(0, len(list_thanks_sticker)-1)],
            reply_markup=button
            )
    elif [word for word in list_hi if word in text]:
        list_hi_answer = [
            '{}, –ø—Ä–∏–≤–µ—Ç, –º–æ–∂–µ—Ç –ø–æ–≥–∞–¥–∞–µ–º?'.format(name),
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}!'.format(name),
            'Hello üëã',
            ]
        list_hi_sticker = [
            ('CAACAgIAAxkBAAIOo2FnFc3Eh9gzBko5fi-edLxZAAHqyAACVAADQbVWDGq3-McI'
             'jQH6IQQ'),
            ('CAACAgIAAxkBAAIOpWFnFmMMAp8nzN3Gv1rurTWmYeLuAAIRAwAC8-O-CxlunyW'
             'ezCwkIQQ'),
            ('CAACAgIAAxkBAAIOp2FnF4qCXJqteKd7YOAtiSyVyFZ4AAKSAQACVp29Cp_QLQ'
             'hCLtUFIQQ'),
            ('CAACAgIAAxkBAAIOqWFnGBi90XgL4WneLHIN2i7PF2KgAAI1AQACMNSdEbS4Nf1m'
             'oLZ8IQQ'),
        ]
        if chat.type == 'private':
            context.bot.send_message(
                chat_id=chat.id,
                text=list_hi_answer[random.randint(0, len(list_hi_answer)-1)],
                reply_markup=button
                )
        else:
            context.bot.send_message(
                chat_id=chat.id,
                text='–ü—Ä–∏–≤–µ—Ç üëã',
                reply_markup=button
                )
        context.bot.send_sticker(
            chat.id,
            list_hi_sticker[random.randint(0, len(list_hi_sticker)-1)]
            )
    elif [word for word in list_how if word in text]:
        list_answer = ['–£ –º–µ–Ω—è –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–°–µ–π—á–∞—Å –±—ã –ø–æ–≥–∞–¥–∞—Ç—å üîÆ',
                       '–•–æ—Ä–æ—à–æ', '–†–∞–¥—É—é—Å—å –∂–∏–∑–Ω–∏ üòç',
                       '–ì–æ—Ç–æ–≤ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞—Ç—å ü§ì', 'üëç']
        context.bot.send_message(
            chat_id=chat.id,
            text=list_answer[random.randint(0, len(list_answer)-1)],
            reply_markup=button
            )
    elif text == '—Ç–∞—Ä–æ–ª–æ–≥' or text == '–º–∞–º–∞':
        context.bot.send_message(
            chat_id=chat.id,
            text='–ï–ª–µ–Ω–∞ –õ–æ–≥–∏–Ω–æ–≤–∞, https://www.instagram.com/hellyloginson/\n'
                 '–¢–ê–†–û ‚ú≥Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.\n'
                 '–û—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã @Lenoktaro',
            reply_markup=button
            )
    elif [word for word in list_to_do if word in text]:
        context.bot.send_message(
            chat_id=chat.id,
            text=('–û—Ç–ø—Ä–∞–≤–ª—è—é –í–∞–º –∫–∞—Ä—Ç—É –¥–Ω—è —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º, —Ç–∞–∫ –∂–µ '
                  '–æ—Ç–≤–µ—á–∞—é \"–¥–∞-–Ω–µ—Ç\" –Ω–∞ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ'),
            reply_markup=button
            )
    elif text[:10] == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        if str(chat.id) == admin_id:
            st = text.split(' ')
            if 'txt' in st or '—Ç—Ö—Ç' in st:
                tg_analytic.analysis(st)
                with open('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.txt', 'r', encoding='UTF-8') as file:
                    context.bot.send_document(chat.id, file)
                    tg_analytic.remove()
            else:
                messages = tg_analytic.analysis(st)
                context.bot.send_message(chat.id, messages)
        else:
            context.bot.send_message(
                chat.id,
                '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ üòã')
    else:
        random_answer = random.randint(0, 2)
        if random_answer == 0:
            get_help(update, context)
        elif random_answer == 1:
            context.bot.send_sticker(
                chat.id,
                ('CAACAgIAAxkBAAEDHFxhbmwRWLa1ZySyHOeDfUFfcM4VQwACIQEAAvcCyA9E'
                 '9UdZozFIriEE'),
                reply_markup=button)
        else:
            if chat.type == 'private':
                context.bot.send_message(
                    chat_id=chat.id,
                    text=('{}, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§î, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
                          '–º–µ–Ω—é –∫–æ–º–∞–Ω–¥.').format(name),
                    reply_markup=button
                    )
            else:
                context.bot.send_message(
                    chat_id=chat.id,
                    text=('–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§î, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
                          '–º–µ–Ω—é –∫–æ–º–∞–Ω–¥.'),
                    reply_markup=button
                    )
